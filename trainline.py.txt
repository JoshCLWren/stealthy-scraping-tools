import time
import random
from behavior.sst_utils import *
from behavior.behavior import humanMove, humanScroll, press, typeNormal, clickNormal, typeWrite

TEST_PROXY = False

"""
this is an example how to scrape thetrainline.com with stealthy-scraping-tools

question: how many searches can be done without getting blocked?

todo:

- block all outgoing UDP connections
- random installation of ubuntu 20.04 fonts
"""

def startFluxbox():
  # start fluxbox
  os.system('fluxbox &')
  time.sleep(3)


def startVNC():
  # and a vnc server for debugging remotely
  vnc_cmd = 'x11vnc -display {}.0 -forever -passwd {} &'.format(
    os.environ['DISPLAY'],
    os.environ['X11VNC_PASSWORD'],
  )
  print(vnc_cmd)
  os.system(vnc_cmd)


def main():
  if os.getenv('DOCKER') == '1':
    startFluxbox()
    startVNC()

  # startBrowser(args=['--proxy-server="localhost:8947"'])
  startBrowser(args=[])

  if os.getenv('DOCKER') == '1':
    # close the annoying chrome error message bar
    # it skews with coordinates
    # x:1903 y:114 screen:0 window:195035139
    # x:1889 y:113 screen:0 window:195035139
    humanMove(1893, 103)
    humanMove(1889, 103)
    time.sleep(random.uniform(2.5, 3.5))

  if TEST_PROXY:
    goto('https://bot.incolumitas.com/proxy_detect.html')
    time.sleep(random.uniform(25, 50))
    return

  for i in range(150):
    print(f'[{i}] Making Trainline API request...')
    time.sleep(random.uniform(0.5, 1.0))

    goto('https://www.thetrainline.com/')
    initial_wait = (8, 10)
    if i > 0:
      initial_wait = (2, 3)

    time.sleep(random.uniform(*initial_wait))

    # accept cookies?
    if i == 0:
      try:
        cookie_accept = getCoords('#onetrust-accept-btn-handler')
        if cookie_accept:
          humanMove(*cookie_accept, clicks=1)
          time.sleep(random.uniform(0.25, 1.25))
      except Exception as e:
        print('No cookies to accept, #onetrust-accept-btn-handler not found')

    # enter departure 
    if i == 0:
      try:
        input_loc = getCoords('input[name="from.search"]')
        print('Enter Departure ' + str(input_loc))
        humanMove(*input_loc, clicks=3)
        time.sleep(random.uniform(0.45, 0.75))
        typeNormal('London')
        time.sleep(random.uniform(0.7, 1.0))
        press('enter')
        time.sleep(random.uniform(0.5, 0.7))
      except Exception as e:
        print(str(e))
        print(f'[{i}] Could not enter flight destination. Blocked?')
        continue

    # enter destination
    try:
      input_loc = getCoords('input[name="to.search"]')
      print('Enter Destination ' + str(input_loc))
      humanMove(*input_loc, clicks=3)
      time.sleep(random.uniform(0.25, 1.25))
      typeNormal(random.choice(['Birmingham', 'Leicester', 'Gatwick Airport', 'Vauxhall', 'Leeds', 'Brighton']))
      time.sleep(random.uniform(1.5, 2.5))
      press('enter')
      time.sleep(random.uniform(0.3, 0.4))
    except Exception as e:
      print(str(e))
      print(f'[{i}] Could not enter flight destination. Blocked?')
      continue

    # submit
    try:
      submit = getCoords('button[type="submit"]')
      print('Submit ' + str(submit))
      humanMove(*submit)
    except Exception as e:
      print(str(e))
      print(f'[{i}] Could not submit search. Blocked?')
      continue

    # wait for selector to appear
    for i in range(20):
      if i > 14:
        print('results could not be loaded')
        break

      time.sleep(random.uniform(1.5, 2))
      results_container = getCoords('[data-test="train-results-container-OUTWARD"]')
      if results_container:
        print(f'[{i}] Train Results loaded at {results_container}!')
        break

if __name__ == '__main__':
  main()